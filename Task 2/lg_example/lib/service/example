import 'dart:async';
import 'dart:io';

import 'package:lg_example/model/kml.dart';
import 'package:lg_example/model/kml_send.dart';
import 'package:lg_example/service/file_service.dart';
import 'package:lg_example/service/shared_pref.dart';
import 'package:lg_example/showtoast.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:dartssh2/dartssh2.dart';

class LGConnection {
  final _pref = SharedPref();
Future<String?> getScreenAmount() async {
  dynamic credencials = await _pref.getData();

      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
   return  client.execute("grep -oP '(?<=DHCP_LG_FRAMES_MAX=).*' personavars.txt").toString();
     
  }

  final String _url = 'http://lg1:81';

  int screenAmount = 5;

    int get logoScreen {
    if (screenAmount == 1) {
      return 1;
    }

    return (screenAmount / 2).floor() + 2;
  }



  Future sendToLG(String kml, ) async {
  dynamic credencials = await _pref.getData();

    try {
      SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
      showToast('Done');
    } catch (e) {
      showToast('Something went wrong');

      throw Exception(e);
    }
  }

    Future<void> setLogos(
   ) async {
   
    try {
      final result = await getScreenAmount();
      if (result != null) {
        screenAmount = int.parse(result);
      }

      await sendKMLToSlave(logoScreen, SendKML.sendlogo());
    } catch (e) {
      // ignore: avoid_print
      print(e);
    }
  }

    Future<void> sendKMLToSlave(int screen, String content) async {
    try {
  dynamic credencials = await _pref.getData();

      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
          client.execute("echo '$content' > /var/www/html/kml/slave_$screen.kml");
    } catch (e) {
      // ignore: avoid_print
      print(e);
    }
  }

 
  Future<void> clearSlave(String screen) async {
    final kml = SendKML.sendClean('slave_$screen');

    try {
  dynamic credencials = await _pref.getData();


      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
      client.execute("echo '$kml' > /var/www/html/kml/slave_$screen.kml");
    } catch (e) {
      // ignore: avoid_print
      print(e);
    }
  }

  Future<void> clearKml({bool keepLogos = true}) async {
    String query =
        'echo "exittour=true" > /tmp/query.txt && > /var/www/html/kmls.txt';

    for (var i = 2; i <= screenAmount; i++) {
      String blankKml = SendKML.sendClean('slave_$i');
      query += " && echo '$blankKml' > /var/www/html/kml/slave_$i.kml";
    }

    if (keepLogos) {
      final kml = SendKML.sendlogo();

      query +=
          " && echo '$kml' > /var/www/html/kml/slave_$logoScreen.kml";
    }
     try {
  dynamic credencials = await _pref.getData();


      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
      showToast('Done');
    await client.execute(query);
    } catch (e) {
      showToast('Something went wrong');

      throw Exception(e);
    }

  }
 Future<void> upload(String filePath) async {
    try {
  dynamic credencials = await _pref.getData();


      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
 final sftp = await client.sftp();
final file = await sftp.open(filePath, mode: SftpFileOpenMode.create | SftpFileOpenMode.write);
await file.write(File('/var/www/html').openRead().cast()); 
      showToast('Connected');
    } catch (e) {
      showToast('Connection Failed');

      throw Exception(e);
    }

  }
    Future<void> sendKml(KML kml,
      {List<Map<String, String>> images = const []}) async {
    final fileName = '${kml.name}.kml';

    final kmlFile = await FileService.createFile(fileName, kml.fileKML);
    await upload(kmlFile.path);
 try {
  dynamic credencials = await _pref.getData();


      SSHClient client = SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
    await client
        .execute('echo "$_url/$fileName" > /var/www/html/kmls.txt');
      showToast('Connected');
    } catch (e) {
      showToast('Connection Failed');

      throw Exception(e);
    }
  }
  Future<void> connect() async {
  dynamic credencials = await _pref.getData();

    try {
      SSHClient(
        await SSHSocket.connect(
          '${credencials['ip']}',
          int.parse('${credencials['port']}'),
          timeout: Duration(seconds: 5),
        ),
        username: '${credencials['username']}',
        onPasswordRequest: () => '${credencials['pass']}',
      );
      showToast('Connected');
    } catch (e) {
      showToast('Connection Failed');

      throw Exception(e);
    }
  }

  Future<void> disconnect() async {
  dynamic credencials = await _pref.getData();


    SSHClient client = SSHClient(
      await SSHSocket.connect(
        '${credencials['ip']}',
        int.parse('${credencials['port']}'),
        timeout: Duration(seconds: 1),
      ),
      username: '${credencials['username']}',
      onPasswordRequest: () => '${credencials['pass']}',
    );

    client.socket.close();
  }
}
